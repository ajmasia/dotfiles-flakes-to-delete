#!/usr/bin/env bash

# AMD Ryzen 7 4800H processor profiler CLI tool for Slimbook computers
# If you use different AND processor, please review the params here https://shorturl.at/jHJ35

COLOR_OFF='\033[0m' # Text Reset
GREEN='\033[0;32m'  # Green
YELLOW='\033[0;33m' # Yellow
RED='\e[31m'        

CPU=$(cat /proc/cpuinfo | grep name | uniq | cut -d ':' -f2 | sed -r "s/^\s+//g")
BAT=0
AC_STATUS=0
DESKTOP=1

if [ -d "/sys/class/power_supply/BAT0" ]; then
  BAT=1 
  DESKTOP=0
  AC_STATUS=$(cat /sys/class/power_supply/AC0/online)
fi

SLOW_WITH_AC="--tctl-temp=95 --slow-limit=8000 --stapm-limit=8000 --fast-limit=8000"

MEDIUM_WITH_AC="--tctl-temp=95 --slow-limit=11000 --stapm-limit=11000 --fast-limit=15000"

HIGH_WITH_AC="--tctl-temp=95 --slow-limit=25000 --stapm-limit=30000 --fast-limit=35000"


help() {
	printf "${YELLOW}Slimbook ${CPU} profile updater tool${COLOR_OFF}\n\n"
	printf "${GREEN}Usage amd-controller [command <option>] [option]${COLOR_OFF}\n\n"
  printf "From ajmasia bin"

	printf "${YELLOW}Commands:${COLOR_OFF}\n"
	echo "set <option>       Set processor profile"
	echo

	printf "${YELLOW}Options:${COLOR_OFF}\n"
	echo "-s, --slow              Set your processor to work with slow profile"
	echo "-m, --medium            Set your processor to work with medium profile"
	echo "-h, --high              Set your processor to work with high profil"
	echo "-ps, --power-saving     Tune your processor for power saving" 
	echo "-mp, --max-performance  Tune your processor for max performance" 
	echo

	printf "${YELLOW}Flags:${COLOR_OFF}\n"
	echo "-h, --help         Show CLI help"
	echo "-i, --info         Show processor profile info"
	echo

	printf "${GREEN}Example: Type 'amd-controller set -s' to set your processor to work with a slow profile${COLOR_OFF}\n"
	echo
	echo "Inspired by: https://shorturl.at/hqrAL"
	echo "Review params for other AMD processors here: https://shorturl.at/jHJ35"
}

check_dependences() {
	if ! command -v ryzenadj &>/dev/null 2>&1; then
		printf >&2 "${RED}Error: ryzenadj could not be found\n"
		exit 1
  elif ! command -v notify-send &>/dev/null 2>&1; then
		printf >&2 "${RED}Error: notify-send could not be found\n"
		exit 1
  fi
}

set_slow_profile() {
  if [[ ($BAT == "1" && $AC_STATUS == "1") || $DESKTOP == "1" ]]; then
    sudo ryzenadj $SLOW_WITH_AC &>/dev/null
  else
    sudo ryzenadj $SLOW_WITH_BATTERY &>/dev/null
  fi

  printf "${GREEN}ðŸ›   SLOW profile set successfully for $CPU processor\n"
}

set_medium_profile() {
  if [[ ($BAT == "1" && $AC_STATUS == "1") || $DESKTOP == "1" ]]; then
    sudo ryzenadj $MEDIUM_WITH_AC &>/dev/null
  else
    sudo ryzenadj $MEDIUM_WITH_BATTERY &>/dev/null
  fi

  printf "${GREEN}ðŸ›   MEDIUM profile set successfully for $CPU processor\n"
}

set_high_profile() {
  if [[ ($BAT == "1" && $AC_STATUS == "1") || $DESKTOP == "1" ]]; then
    sudo ryzenadj $HIGH_WITH_AC &>/dev/null
  else
    sudo ryzenadj $HIGH_WITH_BATTERY &>/dev/null
  fi

  printf "${GREEN}ðŸ›   HIGH profile set successfully for $CPU processor\n"
}

set_fire_profile() {
  if [[ ($BAT == "1" && $AC_STATUS == "1") || $DESKTOP == "1" ]]; then
    sudo ryzenadj $FIRE_WITH_AC &>/dev/null
  else
    sudo ryzenadj $FIRE_WITH_BATTERY &>/dev/null
  fi

  printf "${GREEN}ðŸ›   FIRE profile set successfully for $CPU processor\n"
}

set_silent_profile() {
  if [[ ($BAT == "1" && $AC_STATUS == "1") || $DESKTOP == "1" ]]; then
    sudo ryzenadj $SILENT_WITH_AC &>/dev/null
  else
    sudo ryzenadj $SILENT_WITH_BATTERY  &>/dev/null
  fi

  printf "${GREEN}ðŸ›  SILENT profile set successfully for $CPU processor\n"
}

set_balance_profile() {
  if [[ ($BAT == "1" && $AC_STATUS == "1") || $DESKTOP == "1" ]]; then
    sudo ryzenadj $BALANCE_WITH_AC &>/dev/null
  else
    sudo ryzenadj $BALANCE_WITH_BATTERY &>/dev/null
  fi

  printf "${GREEN}ðŸ›  BALANCE profile set successfully for $CPU processor\n"
}

set_power_saving_profile() {
  sudo ryzenadj --power-saving

  printf "${GREEN}ðŸ›  POWER SAVING profile set successfullys for $CPU processor\n"
}

set_max_performance_profile() {
  sudo ryzenadj --max-performance

  printf "${GREEN}ðŸ›  MAX PEPERFORMANCE profile set successfullys for $CPU processor\n"
}

get_current_tune_values() {
  STAPM_LIMIT=$(sudo ryzenadj -i | grep "STAPM LIMIT" | awk '{print $5}')
  PPT_LIMIT_FAST=$(sudo ryzenadj -i | grep "PPT LIMIT FAST" | awk '{print $6}')
  PPT_LIMIT_SLOW=$(sudo ryzenadj -i | grep "PPT LIMIT SLOW" | awk '{print $6}')
  CCLK_BOOST_SETPOINT=$(sudo ryzenadj -i | grep "CCLK Boost SETPOINT" | awk '{print $6}')
  CCLK_BUSY_VALUE=$(sudo ryzenadj -i | grep "CCLK BUSY VALUE" | awk '{print $6}')
}

getPowerValue() {
  echo $(jq .modePowerLimits.$1 /etc/amd-controller/config.json)
}

getCurrentProfile() {
  get_current_tune_values

  if [[ $STAPM_LIMIT == $(getPowerValue ac.slow.average && \
    $PPT_LIMIT_SLOW == $(getPowerValue ac.slow.sustained && \
    $PPT_LIMIT_FAST == $(getPowerValue ac.slow.actual ]]; then
  echo "slow"

  elfi [[ $STAPM_LIMIT == $(getPowerValue bat.slow.average && \
    $PPT_LIMIT_SLOW == $(getPowerValue bat.slow.sustained && \
    $PPT_LIMIT_FAST == $(getPowerValue bat.slow.actual ]]; then
  echo "slow"

  elfi [[ $STAPM_LIMIT == $(getPowerValue ac.medium.average && \
    $PPT_LIMIT_medium == $(getPowerValue ac.medium.sustained && \
    $PPT_LIMIT_FAST == $(getPowerValue ac.medium.actual ]]; then
  echo "medium"

  elfi [[ $STAPM_LIMIT == $(getPowerValue bat.medium.average && \
    $PPT_LIMIT_medium == $(getPowerValue bat.medium.sustained && \
    $PPT_LIMIT_FAST == $(getPowerValue bat.medium.actual ]]; then
  echo "medium"

  elfi [[ $STAPM_LIMIT == $(getPowerValue ac.high.average && \
    $PPT_LIMIT_high == $(getPowerValue ac.high.sustained && \
    $PPT_LIMIT_FAST == $(getPowerValue ac.high.actual ]]; then
  echo "high"

  elfi [[ $STAPM_LIMIT == $(getPowerValue bat.high.average && \
    $PPT_LIMIT_high == $(getPowerValue bat.high.sustained && \
    $PPT_LIMIT_FAST == $(getPowerValue bat.high.actual ]]; then
  echo "high"

  elfi [[ $STAPM_LIMIT == $(getPowerValue ac.fire.average && \
    $PPT_LIMIT_fire == $(getPowerValue ac.fire.sustained && \
    $PPT_LIMIT_FAST == $(getPowerValue ac.fire.actual ]]; then
  echo "fire"

  elfi [[ $STAPM_LIMIT == $(getPowerValue bat.fire.average && \
    $PPT_LIMIT_fire == $(getPowerValue bat.fire.sustained && \
    $PPT_LIMIT_FAST == $(getPowerValue bat.fire.actual ]]; then
  echo "fire"

  else 
    echo "auto"
  fi
}

show_processor_profile_info() {
  get_current_tune_values

  printf "ï‹› ${GREEN}${CPU} currrent profile info${COLOR_OFF}\n"

  printf "BAT present: ${YELLOW}$([[ $BAT == 1 ]] && echo "YES" || echo "NO")${COLOR_OFF}\n" 
  printf "AC present: ${YELLOW}$([[ $AC_STATUS == 1 ]] && echo "YES" || echo "NO")${COLOR_OFF}\n" 
  printf "Desktop environtment: ${YELLOW}$([[ $DESKTOP == 1 ]] && echo "YES" || echo "NO")${COLOR_OFF}\n\n" 

  printf "Param               | Description                     | Value  \n"
  echo "--------------------|---------------------------------|--------"
  printf "STAPM LIMIT         | Sustained Power Limit (mW)      | ${STAPM_LIMIT}\n"
  printf "PPT LIMIT SLOW      | Average Power Limit (mW)        | ${PPT_LIMIT_SLOW}\n"
  printf "PPT LIMIT FAST      | Actual Power Limit (mW)         | ${PPT_LIMIT_FAST}\n"
  printf "CCLK BOOST SETPOINT | Power Saving tune value (mW)    | ${CCLK_BOOST_SETPOINT}\n"
  printf "CCLK BUSY VALUE     | Max Performance tune value (mW) | ${CCLK_BUSY_VALUE}\n\n"

  printf "${YELLOW}STAPM (Skin Temperature Aware Power Management)${COLOR_OFF}\n"
  printf "Your device's STAPM configuration is set by the manufacturer and differs depending on the processor used and the form factor of the device\n\n"

  printf "${YELLOW}PPT (Package Power Tracking)${COLOR_OFF}\n"
  printf "PPT is a measurement of power to the CPU Socket on the motherboard and not the CPU itself\n\n"

  printf "${YELLOW}More info${COLOR_OFF}\n"
  printf "Ryzenadj: https://github.com/FlyGoat/RyzenAdj\n"
  printf "AMDController: https://ryzencontroller.com/\n\n"

	printf "${GREEN}For more help, please type 'amd-controller -h, --help'${COLOR_OFF}\n\n"
}

check_dependences

case $1 in
set)
	case $2 in
	-b | --base)
		set_base_profile
		;;
	-s | --slow)
		set_slow_profile
		;;
	-m | --medium)
		set_medium_profile
		;;
	-h | --high)
		set_high_profile
		;;
	-ps | --power-saving)
		set_power_saving_profile
		;;
	-mp | --max-performance)
		set_max_performance_profile
		;;
	*)
		printf "${YELLOW}Invalid option\n${COLOR_OFF}"
		help
		;;
	esac
	;;
-i | --info)
	show_processor_profile_info
	;;
-h | --help)
	help
	;;
*)
	printf "${YELLOW}Invalid command or option\n${COLOR_OFF}"
	help
	;;
esac
